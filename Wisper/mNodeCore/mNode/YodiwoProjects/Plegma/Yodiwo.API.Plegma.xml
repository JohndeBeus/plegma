<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yodiwo.API.Plegma</name>
    </assembly>
    <members>
        <member name="T:Yodiwo.API.ApiMsg">
            <summary>
            Base class of an API message, from which all message classes inherit
            </summary>
        </member>
        <member name="F:Yodiwo.API.ApiMsg.SeqNo">
            <summary>
            Sequence number of this message
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.IncidentDescriptor">
            <summary>
            Descriptor class for Edge Node Incidents (crashes, unexpected restarts, etc)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Timestamp">
            <summary>timestamp in msec since Unix Epoch. Allowed to be empty</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.FilePath">
            <summary>optional file path of entity producing the incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.FileName">
            <summary>optional file name of entity producing the incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Method">
            <summary>optional name of method/function producing the incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.LineNumber">
            <summary>optional line number of code producing the incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Platform">
            <summary>optional name of platform running</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Tags">
            <summary>comma separated Tag cloud</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Sender">
            <summary>ID of sender</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.StackTrace">
            <summary>newline-separated (although not enforced) stack trace of incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Parameters">
            <summary>one or more name-value pairs with extra, custom, information</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Messages">
            <summary>one or more messages describing incident</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.Severity">
            <summary>Severity of incident (follows Unix Syslog levels), <see cref="T:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity"/></summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.UserAgent">
            <summary>optional User Agent string for client side errors</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity">
            <summary>Severity levels enum</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Emergency">
            <summary>System is unusable</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Alert">
            <summary>Should be corrected immediately</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Critical">
            <summary>Critical conditions, primary function failures</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Error">
            <summary>Error conditions, limits exceeded, improper behavior</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Warning">
            <summary>May indicate unexpected behavior or that an error will occur if action is not taken</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Notice">
            <summary>Signify events that are unusual, but not necessarily error conditions</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Informational">
            <summary>Normal operational messages that require no action.</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.IncidentDescriptor.eSeverity.Debug">
            <summary>Information useful to developers for debugging the application</summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.IncidentDescriptor.#ctor">
            <summary>incident constructor</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.UserKey">
            <summary>
            Globally unique identifier of a <see cref = "T:Yodiwo.API.Plegma.UserKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.NodeKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.NodeKey"/>
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeKey.ToStringFullSize">
            <summary> like ToString() but fills digits with leading zeros</summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeKey.GetBytes(System.Byte[],System.Int32)">
            <summary> write the key to a byte array </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeKey.FromBytes(System.Byte[],System.Int32)">
            <summary> get key from byte array </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeKey.ToStringEx">
            <summary> User-Friendly string (invalid as key)</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.Thing"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.Thing"/>'s <see cref="T:Yodiwo.API.Plegma.Port"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.GraphDescriptorKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.GraphDescriptorKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.GraphKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.GraphKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.BlockKey">
            <summary>
            Globally unique identifier of a Graph's <see cref="T:Yodiwo.API.Plegma.BlockKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.GroupKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.GroupKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.DriverKey">
            <summary>
            Globally unique identifier of a Graph's <see cref="T:Yodiwo.API.Plegma.DriverKey"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.UserApiKey">
            <summary>
            Globally unique identifier of an Api Key (<see cref="T:Yodiwo.API.Plegma.UserApiKey"/>)
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.BinaryResourceDescriptorKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.BinaryResourceDescriptor"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.SubUserKey">
            <summary>
            Globally unique identifier of a <see cref="T:Yodiwo.API.Plegma.SubUserKey"/>
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.SubUserKey.ToStringFullSize">
            <summary> like ToString() but fills digits with leading zeros</summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.SubUserKey.GetBytes(System.Byte[],System.Int32)">
            <summary> write the key to a byte array </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.SubUserKey.FromBytes(System.Byte[],System.Int32)">
            <summary> get key from byte array </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.SubUserKey.ToStringEx">
            <summary> User-Friendly string (invalid as key)</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.WrapperMsg">
            <summary>
            Wrapper class mainly for providing synchronization services to sync-less protocols (mqtt, websockets, etc)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.Flags">
            <summary> message flags (request/response, etc) </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.SyncId">
            <summary>
            for RPC blocking calls: synchronization ID
            Message ID or Request message, or number of previous message that this message is responding to
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.Payload">
            <summary>
            JSON Serialized payload
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.WrapperMsg.eMsgFlags">
            <summary>wrapper message flags</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.eMsgFlags.None">
            <summary>no flags (async message)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.eMsgFlags.Request">
            <summary>message is a request</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WrapperMsg.eMsgFlags.Response">
            <summary>message is a response to a request</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.WebSocketMsg">
            <summary>
            Websocket protocol wrapper. Inherits from base WrapperMsg, adds Id and Subid
            </summary>  
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.Id">
            <summary>
            Id of message (pairing, api, other message)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.SubId">
            <summary>
            subid of message (type of api or pairing message)
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.WebSocketMsg.eWSMsgId">
            <summary> enum of message ID </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.eWSMsgId.None">
            <summary> no id / invalid </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.eWSMsgId.Pairing">
            <summary> Pairing type message </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.eWSMsgId.Api">
            <summary> Plegma API message </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.WebSocketMsg.eWSMsgId.Warlock">
            <summary> Warlock API message </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.MqttMsg">
            <summary>
            Mqtt message encapsulation class.
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.FcmMsg">
            <summary>
            Gcm message encapsulation class.
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ePortType">
            <summary>
            type of values that each Port sends / receives
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Undefined">
            <summary>undefined, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Integer">
            <summary>integer values</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Decimal">
            <summary>single precision floating point values</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.DecimalHigh">
            <summary>double precision floating point values</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Boolean">
            <summary>boolean values (can be true/false, on/off, 1/0, etc)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Color">
            <summary>RGBA triplet in "R,G,B,A" format, where each element is a floating point number</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.String">
            <summary>generic string</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.VideoDescriptor">
            <summary>video </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.AudioDescriptor">
            <summary>audio </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.BinaryResourceDescriptor">
            <summary>binary resource port</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.I2CDescriptor">
            <summary>i2c thing</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.JsonString">
            <summary>json string</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.IncidentDescriptor">
            <summary>incident descriptor port</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortType.Timestamp">
            <summary>incident descriptor port</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ioPortDirection">
            <summary>
            Direction of Port
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ioPortDirection.Undefined">
            <summary>undefined, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ioPortDirection.InputOutput">
            <summary>both Input and Output, Port will be used in both Graph Input and Output Things</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ioPortDirection.Output">
            <summary>Output only; Port will be used only in Graph Input Things (node->cloud)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ioPortDirection.Input">
            <summary>Input only; Port will be used only in Graph Output Things (cloud->node)</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ePortConf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortConf.None">
            <summary>no configuration set</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortConf.PropagateAllEvents">
            <summary>
            OBSOLETE FLAG, as it is now the default behavior even if no flags are set: 
            port will propagate all events, not only "dirty" ones (i.e. value not changed but triggered in graph)
            <para>To explicitly suppress this behavior set the <see cref="F:Yodiwo.API.Plegma.ePortConf.SupressIdenticalEvents"/> flag</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortConf.IsTrigger">
            <summary>mark the port as a trigger port (this may have an effect on where it's placed on the block model and how events from it are propagated)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortConf.DoNotNormalize">
            <summary>Enable this flag to force raw values for the port. Normalization will be applied if <see cref="T:Yodiwo.API.Plegma.PortStateSemantics.Decimal_Range"/> or <see cref="T:Yodiwo.API.Plegma.PortStateSemantics.Integer_Range"/> semantics is used</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortConf.SupressIdenticalEvents">
            <summary>The opposite of <see cref="F:Yodiwo.API.Plegma.ePortConf.PropagateAllEvents"/>. If set port will only propagate "dirty" events, where the value actually changed and was not just triggered</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.Port">
            <summary>
            Basic Input/Output entity of a Thing
            Creates and sends messages towards the Yodiwo cloud service, 
            or receives and handles messages from the cloud.
            Both events occur via the <see cref="T:Yodiwo.API.Plegma.PortEventMsg"/> message
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.PortKey">
            <summary>Globally unique string identifying this port; Construct it using the <see cref="F:Yodiwo.API.Plegma.Port.PortKey"/> constructor</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Name">
            <summary>Friendly name of this Port (as it will appear in the Cyan UI and blocks)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Description">
            <summary>Description of Port to show in Cyan (tooltip, etc)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.ioDirection">
            <summary>Direction (<see cref="T:Yodiwo.API.Plegma.ioPortDirection"/>) of Port</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Type">
            <summary>type (<see cref="T:Yodiwo.API.Plegma.ePortType"/>) of values that each Port sends / receives</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Semantics">
            <summary>semantics of values that Port sends / receives</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.PortModelId">
            <summary>id of Port that can Match to a ThingModelType </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.State">
            <summary cref="F:Yodiwo.API.Plegma.Port.State">Current (at latest update/sampling/trigger/etc) value of Port as String.
            Contains a string representation of the port's state, encoded according to the port's <see cref="T:Yodiwo.API.Plegma.ePortType"/>
            On receiving events the Cloud Server will attempt to parse the State based on its <see cref="T:Yodiwo.API.Plegma.ePortType"/>
            When sending events the Cloud Server will encode the new state into a string, again according to the Port's <see cref="T:Yodiwo.API.Plegma.ePortType"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.RevNum">
            <summary>
            Port state sequence number: incremented by the Cloud server at every state update, 
            so that Node and servers stay in sync
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.ConfFlags">
            <summary>Configuration flags for port</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.LastUpdatedTimestamp">
            <summary>
            Timestamp of the last action that updated the port value and/or revision number
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Color">
            <summary>
            Color of port value
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.Size">
            <summary>
            Size of port value
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.RevNum_NoTracking">
            <summary> Revnum indicating no tracking of revision numbers </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Port.RevNum_Initialize">
            <summary> Revnum indicating initialization of port (as if portstate was followed by thing addditiong) </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eBinaryResourceContentType">
            <summary>
            Content type of a binary resource.
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eBinaryResourceLocationType">
            <summary>
            Location type of a binary resource.
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.BinaryResourceDescriptor">
            <summary>
            Descriptor of a binary resource.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.BinaryResourceDescriptor.ContentDescriptorJson">
            <summary>Json-encoded Content descriptor (a class that derives from <see cref="P:Yodiwo.API.Plegma.BinaryResourceDescriptor.ContentDescriptor"/>)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.BinaryResourceDescriptor.LocationDescriptorJson">
            <summary>Json-encoded Location descriptor (a class that derives from <see cref="P:Yodiwo.API.Plegma.BinaryResourceDescriptor.LocationDescriptor"/>)</summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.BinaryResourceDescriptor.IsImage">
            <summary>
            Return true if this binary resource is image, elsewhere return false
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yodiwo.API.Plegma.BinaryResourceDescriptor.Update(Yodiwo.API.Plegma.BinaryResourceDescriptor)">
            <summary>
            
            </summary>
            <param name="brd"></param>
        </member>
        <member name="T:Yodiwo.API.Plegma.LocationDescriptor">
            <summary>
            Descriptor of a binary resource location.
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.RestServiceType">
            <summary>
            Type of a REST service
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.HttpLocationDescriptor">
            <summary>
            Descriptor of HTTP Location
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.RedisDBLocationDescriptor">
            <summary>
            Descriptor of RedidDB Location
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ContentDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ImageContentDescriptor.ImageFileFormatFromURI(System.String)">
            <summary>
            Return image file format from URI
            </summary>
            <param name="Uri"></param>
            <returns></returns>
        </member>
        <member name="M:Yodiwo.API.Plegma.ImageContentDescriptor.ImageTypeFromURI(System.String)">
            <summary>
            Return image type from URI
            </summary>
            <param name="Uri"></param>
            <returns></returns>
        </member>
        <member name="T:Yodiwo.API.Plegma.ConfigParameter">
            <summary>
            Configuration parameters for the thing in generic name-value pairs
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigParameter.Name">
            <summary>Name of configuration parameter</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigParameter.Value">
            <summary>Value of configuration parameter</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigParameter.Description">
            <summary>Description and usage guidelines of configuration parameter</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingUIHints">
            <summary>
            Collection of instructions ("hints") for how to present this thing in the Cyan UI
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingUIHints.IconURI">
            <summary>URI of icon to show in Cyan for this thing</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingUIHints.Description">
            <summary>Description of Thing to show in Cyan (tooltip, etc)</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eThingConf">
            <summary>
            Thing configuration flags
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingConf.None">
            <summary>no configuration set</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingConf.SyncEventWithAllEndpoints">
            <summary>
            if set, any input (towards the Cloud Server) event from this thing will be propagated to all currently connected Endpoints, if any
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingConf.Removable">
            <summary>
            specifies whether the Thing is allowed to be remotely removed via a Plegma msg (<see cref="T:Yodiwo.API.Plegma.ThingsSet"/> with operation id <see cref="F:Yodiwo.API.Plegma.eThingsOperation.Delete"/>)
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.Thing">
            <summary>
            Main representation of a Thing that can interact with the Yodiwo cloud service
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.ThingKey">
            <summary>
            Globally unique Key string of this Thing
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Name">
            <summary>
            friendly name of this Thing
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Config">
            <summary>
            list of vendor provided configuration parameters (changeable by the user)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.ReadonlyInfo">
            <summary>
            list of vendor provided read-only information
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Ports">
            <summary>
            list of ports (inputs / outputs) that this Thing implements
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Type">
            <summary>
            Specifies the Thing's type <see cref="T:Yodiwo.API.Plegma.ThingModelType"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.BlockType">
            <summary>
            Specifies the Thing's block type if it's to be specially modeled in the Cyan UI
            It can be left null if this Thing is to be modeled by the default Cyan UI blocks
            In this case Output-type Ports are gathered and represented as a Cyan UI Input Thing (thing->cloud events)
            and Input-type Ports are gathered and represented as a Cyan UI Output Thing (cloud->thing events)
            Both event directions occur via the <see cref="T:Yodiwo.API.Plegma.PortEventMsg"/> messages
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.ConfFlags">
            <summary>
            Configuration flags for Thing
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Removable">
            <summary>
            Specifies whether the thing can be removed
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.RESTUri">
            <summary>
            Specifies a uri to which the cloud will post messages in case an RX-incapable node is connected.
            Can be used as a return path for REST api. May be left null or empty.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.Hierarchy">
            <summary>
            Specifies the Thing's hierarchy within the node's modeled ecosystem.
            Specifies a hierarchical view (separated by '/') of the Thing's position in the User's ecosystem of devices. Must start with '/'
            May be left null or empty.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.Thing.UIHints">
            <summary>
            Hints for the UI system
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PlegmaApiMsg">
            <summary>
            Base class of an API message, from which all message classes inherit
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.GenericRsp">
            <summary>
            General Response to request-type messages. Used to unblock requests waiting for responses that are of basic ACKnowledge type
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GenericRsp.IsSuccess">
            <summary> Indicate that the requested action was successful or not  </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GenericRsp.StatusCode">
            <summary> An optional code for result </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GenericRsp.Message">
            <summary> An optional message for the result </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.GenericRsp.#ctor">
            <summary>
            Generic response constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.LoginReq">
            <summary>
            Login Request
            to be used only for transports that require explicit authentication via the API itself
            Direction: Cloud to Node
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.LoginReq.#ctor">
            <summary>
            constructor for login request
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eConnectionFlags">
            <summary>
            Connection parameters / flags
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.LoginRsp">
            <summary>
            Login Response
            <para>sends node and secret keys</para>
            to be used only for transports that require explicit authentication via the API itself
            Direction: Node to Cloud
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.LoginRsp.NodeKey">
            <summary>
            NodeKey of Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.LoginRsp.SecretKey">
            <summary>
            Secret key of Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.LoginRsp.Flags">
            <summary>
            Flags that specify connection parameters
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.LoginRsp.DesiredEndpoint">
            <summary>
            If creation of new endpoint isn't requested, then this variable can be used to request 
            that new Link is assigned to a specific Endpoint.
            This is handled as a suggestion and the server isn't obliged to comply
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.LoginRsp.#ctor">
            <summary>
            parameterless constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eNodeType">
            <summary>
            Type of Node
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eNodeCapa">
            <summary>
            enum of possible node capabilites
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeCapa.None">
            <summary>no capabilities</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeCapa.SupportsGraphSolving">
            <summary>Node supports graph solving</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeCapa.Scannable">
            <summary>Node supports scanning for new Things (i.e. Things are not just fixed at initial setup)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeCapa.IsWarlock">
            <summary>Node supports the Warlock API</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeCapa.IsShellNode">
            <summary>Node is capable of sending/receiving events for Things that don't belong to it</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.Minimum">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.Maximum">
            <summary>
            Maximum value 
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.Step">
            <summary>
            Change step size
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.Pattern">
            <summary>
            Pattern to display (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.ReadOnly">
            <summary>
            Specifies whether the state is read only
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.StateDescription.Type">
            <summary>
            Specifies the state type
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ConfigDescription">
            <summary>
            Describes restrictions and gives information of a configuration parameter.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.DefaultValue">
            <summary>
            The default value (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Description">
            <summary>
            Human readable description (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Label">
            <summary>
            Human readable label (can be null or empty)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Name">
            <summary>
            Name of the configuration parameter (must neither be null nor empty)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Required">
            <summary>
            Specifies whether the parameter is required
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Type">
            <summary>
            The data type of the parameter (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Minimum">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Maximum">
            <summary>
            Maximum value 
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.Stepsize">
            <summary>
            Change step size
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ConfigDescription.ReadOnly">
            <summary>
            Specifies whether the parameter is read only
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortDescription">
            <summary>
            Describes restrictions and gives information of a port <see cref="T:Yodiwo.API.Plegma.Port"/>.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.Description">
            <summary>
            Human readable description for this port (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.Id">
            <summary>
            The unique identifier which identifies this port (must neither be null, nor empty)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.Label">
            <summary>
            Human readable label (can be null)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.Category">
            <summary>
            the category of this port , e.g. "TEMPERATURE" 
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.State">
            <summary>
            Describes the state of this port<see cref="T:Yodiwo.API.Plegma.StateDescription"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortDescription.Semantics">
            <summary>
            Describes the semantics of this port
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingModelType">
            <summary>
            Base class that describes a Model of a Thing <see cref="T:Yodiwo.API.Plegma.Thing"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingModelType.Id">
            <summary>
            The unique identifier which identifies this model (must be neither null nor empty)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingModelType.Name">
            <summary>
            Human readable name for this model
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingModelType.Description">
            <summary>
            Human readable description for this model
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingModelType.Config">
            <summary>
            Describes the configuration parameter(s) of this model<see cref="T:Yodiwo.API.Plegma.ConfigDescription"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingModelType.Ports">
            <summary>
            Describes the port(s) of this model<see cref="T:Yodiwo.API.Plegma.PortDescription"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingType">
            <summary>
            Base class that describes a group of Thing Models <see cref="T:Yodiwo.API.Plegma.ThingModelType"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingType.Type">
            <summary>
            The unique Type Name which identifies this group (must neither be null, nor empty)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingType.Searchable">
            <summary>
            Specifies whether model(s) of this group can automatically be discovered
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingType.Description">
            <summary>
            Human readable description for this group
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingType.Models">
            <summary>
            Describes the model(s) of this group<see cref="T:Yodiwo.API.Plegma.ThingModelType"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.NodeInfoReq">
            <summary>
            Node Info Request
            Sent by cloud to a node, it is to request capabilities and supported types from the node
            <para>Direction: Cloud->Node</para>
            <para>Node must reply with a <see cref="T:Yodiwo.API.Plegma.NodeInfoRsp"/></para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoReq.LatestApiRev">
            <summary>
            Informs of latest Plegma API Revision
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoReq.AssignedEndpoint">
            <summary>
            Endpoint that the node link used to send this message belongs to
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeInfoReq.#ctor">
            <summary>
            Node Info request constructor
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoReq.ThingsRevNum">
            <summary>
            Revision number of Cloud server's entry for Node's Things
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeInfoReq.#ctor(System.Int32)">
            <summary>
            Node Info request constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.NodeInfoRsp">
            <summary>
            Node Info Response
            Message that contains general information about a node including supported Node Types and Capabilities
            <para>Direction: bidirectional (Node->Cloud and Cloud->Node)</para>
            In response to a <see cref="T:Yodiwo.API.Plegma.NodeInfoReq"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.Name">
            <summary>
            Friendly name of responding Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.Type">
            <summary>
            Type (<see cref="T:Yodiwo.API.Plegma.eNodeType"/>) of responding Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.Capabilities">
            <summary>
            Capabilities of this node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.ThingTypes">
            <summary>
            List of <see cref="T:Yodiwo.API.Plegma.ThingType"/>s that this Node presents and implements
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.ThingsRevNum">
            <summary>
            Revision number of responding Node's Things
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.SupportedApiRev">
            <summary>
            Revision number of supported API version
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.BlockLibraries">
            <summary>
            List of BlockLibraries that this Node supports
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.TransientInfo">
            <summary>
            Additional transient info that the node chooses to provide at each connection
            This is shown / used by Workers, but is not saved in any database
            Allowed to be null / empty
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeInfoRsp.AdditionalInfo">
            <summary>
            Additional non-transient info that the node chooses to provide
            This is shown / used by Workers, and it is saved in the User Context database
            Existing keys will get their values updated. Unknown keys are created.
            Allowed to be null / empty
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeInfoRsp.#ctor">
            <summary>
            Node Info Response constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeInfoRsp.#ctor(System.Int32)">
            <summary>
            Node Info Response constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eUnpairReason">
            <summary>
            Reason for Node Unpairing
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eUnpairReason.Unknown">
            <summary> Unknown Reason </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eUnpairReason.InvalidOperation">
            <summary> Node performed an invalid operation </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eUnpairReason.UserRequested">
            <summary> User requested removal of the node from the Cyan UI </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eUnpairReason.TooManyAuthFailures">
            <summary> Node has failed to login too many times </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.NodeUnpairedReq">
            <summary>
            Unpairing request, stating reason code and a possible custom message
            Direction: Cloud->Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeUnpairedReq.ReasonCode">
            <summary> Reason code of unpairing </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeUnpairedReq.Message">
            <summary> Custom unpair message (non-mandatory) </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeUnpairedReq.#ctor">
            <summary>
            Node Unpaired message constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeUnpairedReq.#ctor(System.Int32)">
            <summary>
            Node Unpaired message constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eNodeStatusChangeReason">
            <summary>
            Reason for Node Unpairing
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.Unknown">
            <summary> Unknown Reason </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.InvalidOperation">
            <summary> Node performed an invalid operation </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.UserRequested">
            <summary> User requested removal of the node from the Cyan UI </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.TooManyAuthFailures">
            <summary> Node has failed to login too many times </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.QuotaRelated">
            <summary> Change of status is related to Quota limitations </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeStatusChangeReason.Temporary">
            <summary> Change of status is temporary </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeNewStatus.Unpaired">
            <summary> Node is no longer paired </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeNewStatus.Disabled">
            <summary> Node is (possibly temporarily) disabled </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeNewStatus.Enabled">
            <summary> Node is enabled again after having been disabled</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.NodeStatusChangedReq">
            <summary>
            Unpairing request, stating reason code and a possible custom message
            Direction: Cloud->Node, Node->Cloud
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeStatusChangedReq.NewStatus">
            <summary> node's new status</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeStatusChangedReq.ReasonCode">
            <summary> Reason code for new status </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodeStatusChangedReq.Message">
            <summary> Custom message (non-mandatory) for UI updates, etc </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeStatusChangedReq.#ctor">
            <summary>
            Node Status Changed message constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.NodeStatusChangedReq.#ctor(System.Int32)">
            <summary>
            Node Status Changed message constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eNodeSyncOperation">
            <summary>
            type of sync operation requested
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeSyncOperation.GetEndpoints">
            <summary>
            Node link endpoint asks for all available NodeEndpoints of Node
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eNodeSyncOperation.SetEndpoint">
            <summary>
            Node link requests that it is reassigned to new NodeEndpoint, denoted by <see cref="F:Yodiwo.API.Plegma.EndpointSyncReq.DesiredEndpoint"/>
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.EndpointSyncReq">
            <summary>
            Endpoint Sync request, providing way for individual Node Links to become aware / influence Node operation
            Direction: Node(link) -> Cloud
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.EndpointSyncReq.op">
            <summary>
            type of sync operation requested
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.EndpointSyncReq.DesiredEndpoint">
            <summary>
            If <see cref="T:Yodiwo.API.Plegma.eNodeSyncOperation"/> is <see cref="F:Yodiwo.API.Plegma.eNodeSyncOperation.SetEndpoint"/>, then this variable can be used 
            to request that current Link is assigned/transferred to specific Endpoint.
            This is handled as a suggestion and the server isn't obliged to comply
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.EndpointSyncReq.#ctor">
            <summary>
            EndpointSync Request constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.EndpointSyncReq.#ctor(System.Int32)">
            <summary>
            EndpointSync Request constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.EndpointSyncRsp">
            <summary>
            Endpoint Sync response to previous request
            Direction: Cloud -> Node(link)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.EndpointSyncRsp.op">
            <summary>
            operation being replied to
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.EndpointSyncRsp.Endpoints">
            <summary>
            Array of existing Endpoints currently assigned to NodeKey
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.EndpointSyncRsp.Accepted">
            <summary>
            whether incoming Req was successful / accepted or not
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.EndpointSyncRsp.#ctor">
            <summary>
            EndpointSync Response constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.EndpointSyncRsp.#ctor(System.Int32)">
            <summary>
            EndpointSync Response constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.eThingsOperation">
            <summary>
            Internal operation ID for <see cref="T:Yodiwo.API.Plegma.ThingsGet"/> and <see cref="T:Yodiwo.API.Plegma.ThingsSet"/> messages
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Invalid">
            <summary>invalid opcode</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Update">
            <summary>referenced things are to be updated at receiver. If they don't already exist, they are created</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Overwrite">
            <summary>
            referenced things are to be updated at receiver if they exist, created if not. 
            Previously existing things at receiver that are not in this message are *deleted*
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Delete">
            <summary>ask that the receiver deletes referenced (by the ThingKey) thing</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Get">
            <summary>ask that receiver sends back its existing things as a <see cref="T:Yodiwo.API.Plegma.ThingsSet"/></summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Scan">
            <summary>ask that the receiver scans for new things and send back all results (new and old) as a <see cref="T:Yodiwo.API.Plegma.ThingsSet"/></summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.eThingsOperation.Sync">
            <summary>sync Thing revisions between node and cloud</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingsGet">
            <summary>
            Node Things Request
            Used to request a <see cref="T:Yodiwo.API.Plegma.Thing"/>s related operation from the other end.
            <para>
            Receiving side *must* reply with a <see cref="T:Yodiwo.API.Plegma.ThingsSet"/>. 
            </para>
            <para>Direction: bidirectional (Node->Cloud and Cloud->Node)</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsGet.Operation">
            <summary>
            Identifier of the operation requested; see <see cref="T:Yodiwo.API.Plegma.eThingsOperation"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsGet.ThingKey">
            <summary>
            [DEPRECATED] replaced by the more generic <see cref="F:Yodiwo.API.Plegma.ThingsGet.Key"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsGet.Key">
            <summary>
            String key that this request refers to (normally of type <see cref="T:Yodiwo.API.Plegma.ThingKey"/>).
            If left null/empty then this operation refers to all of the Node's Things
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsGet.RevNum">
            <summary>
            Things revision number of sender; 0 if not available or applicable
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ThingsGet.#ctor">
            <summary>
            Things Request constructor
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ThingsGet.#ctor(System.Int32)">
            <summary>
            Things Request constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingsSet">
            <summary>
            Node Things Response
            Response to a <see cref="T:Yodiwo.API.Plegma.ThingsSet"/> request
            <para>
            a ThingsSet message should have:
             - <see cref="F:Yodiwo.API.Plegma.ThingsSet.Operation"/> set to ThingReq's operation
             - <see cref="F:Yodiwo.API.Plegma.ThingsSet.Status"/> set to True if ThingsGet was successfully handled and this Msg has valid data, False otherwise
             - if <see cref="F:Yodiwo.API.Plegma.ThingsSet.Status"/> is True, <see cref="F:Yodiwo.API.Plegma.ThingsSet.Data"/> set to correspond to requested Req's operation, set to Null otherwise. 
               <see cref="F:Yodiwo.API.Plegma.ThingsSet.Data"/> is allowed to be null if originally requested operation does not expect back data, only status
            </para>
            <para>Direction: bidirectional (Node->Cloud and Cloud->Node)</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsSet.Operation">
            <summary>
            Identifier of this message's operation of type <see cref="T:Yodiwo.API.Plegma.eThingsOperation"/>
            Operation fields must match between Req and Rsp.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsSet.Status">
            <summary>
            Indicates if the request was successful and this response contains actual data
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsSet.Data">
            <summary>
            Array of <see cref="T:Yodiwo.API.Plegma.Thing"/>s that contain data related to the selected Operation, if applicable
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ThingsSet.RevNum">
            <summary>
            Things revision number of responder to a previous request; can be 0 if not available or applicable
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ThingsSet.#ctor">
            <summary>
            Things Message constructor (for asynchronous messages)
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PingReq">
            <summary>
            Node Ping Request
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PingReq.Data">
            <summary> A random number to verify the response </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PingReq.#ctor">
            <summary>
            Ping Request constructor
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PingRsp.Data">
            <summary> The data from the ping request </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PingRsp.#ctor">
            <summary>
            Ping Response constructor
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortEvent">
            <summary>
            Port Event class: used to describe a new event that should trigger an endpoint, either towards a node or the Cloud Services
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortEvent.PortKey">
            <summary>
            <see cref="F:Yodiwo.API.Plegma.PortEvent.PortKey"/> of the <see cref="T:Yodiwo.API.Plegma.Port"/> this message refers to (either generating the event, or receiving the event)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortEvent.State">
            <summary>
            Contents of the event in string form. See <see cref="F:Yodiwo.API.Plegma.Port.State"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortEvent.RevNum">
            <summary>
            Revision number of this update; matches the Port State's internal sequence numbering. See <see cref="F:Yodiwo.API.Plegma.Port.State"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortEvent.Timestamp">
            <summary>
            Timestamp (in msec since Unix Epoch) of event creation
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortEvent.#ctor">
            <summary>
            parameterless constructor for Port Events
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortEvent.#ctor(System.String,System.String,System.UInt32,System.UInt64)">
            <summary>
            constructor of PortEvent classes
            </summary>
            <param name="pkey">PortKey of Port this event refers to</param>
            <param name="state">State of Port (i.e. contents of message, <see cref="F:Yodiwo.API.Plegma.Port.State"/></param>
            <param name="revNum">Revision number of this event</param>
            <param name="timestamp">timestamp of this event in msec since Unix Epoch</param>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortEventMsg">
            <summary>
            asynchronous Port Event message
            The main API message to exchange events between Nodes and the Yodiwo Cloud Service
            <para>Direction: bidirectional (Node->Cloud and Cloud->Node)</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortEventMsg.PortEvents">
            <summary>
            Array of <see cref="T:Yodiwo.API.Plegma.PortEvent"/> messages
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortEventMsg.#ctor">
            <summary>
            parameterless constructor of PortEventMsgs
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortEventMsg.#ctor(System.Int32)">
            <summary>
            constructor of PortEventMsgs with sequence numbers
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortEventMsg.#ctor(System.Int32,Yodiwo.API.Plegma.PortEvent)">
            <summary>
            quick(er) constructor for a single-event PortEventMsg
            </summary>
            <param name="seqNo">sequence number of this message</param>
            <param name="ev"></param>
        </member>
        <member name="T:Yodiwo.API.Plegma.VirtualBlockEvent">
            <summary>
            VirtualBlock Event class: used to describe a new event that should trigger a virtual block endpoint, either towards a node or the Cloud Services
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.VirtualBlockEvent.BlockKey">
            <summary>
            <see cref="F:Yodiwo.API.Plegma.VirtualBlockEvent.BlockKey"/> of the Block this message refers to (either generating the event, or receiving the event)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.VirtualBlockEvent.Indices">
            <summary>
            Block IO indices of the event.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.VirtualBlockEvent.Values">
            <summary>
            Contents of the event in json string form.
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.VirtualBlockEvent.RevNum">
            <summary>
            Revision number of this update;
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.VirtualBlockEventMsg">
            <summary>
            asynchronous Port Event message
            The main API message to exchange events between Nodes and the Yodiwo Cloud Service
            <para>Direction: bidirectional (Node->Cloud and Cloud->Node)</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.VirtualBlockEventMsg.BlockEvents">
            <summary>
            Array of <see cref="T:Yodiwo.API.Plegma.PortEvent"/> messages
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.VirtualBlockEventMsg.#ctor">
            <summary>
            parameterless constructor of PortEventMsgs
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.VirtualBlockEventMsg.#ctor(System.Int32)">
            <summary>
            constructor with sequence numbers
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.VirtualBlockEventMsg.#ctor(System.Int32,Yodiwo.API.Plegma.VirtualBlockEvent)">
            <summary>
            quick(er) constructor for a single-event PortEventMsg
            </summary>
            <param name="seqNo">sequence number of this message</param>
            <param name="ev"></param>
        </member>
        <member name="T:Yodiwo.API.Plegma.ePortStateOperation">
            <summary>
            Allowed operations in <see cref="T:Yodiwo.API.Plegma.PortStateGet"/> messages
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortStateOperation.Invalid">
            <summary>reserved; should not be used</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortStateOperation.SpecificKeys">
            <summary>request array of current state for the specified PortKey(s)</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortStateOperation.ActivePortStates">
            <summary>request array of current states for ports currently deployed in graphs</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ePortStateOperation.AllPortStates">
            <summary>request array of current states for all ports of this Node</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortStateGet">
            <summary>
            Port State Request. Will result in a response of type <see cref="T:Yodiwo.API.Plegma.PortStateSet"/>
            <para>Direction: node->cloud</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortStateGet.Operation">
            <summary>Type of operation requested</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortStateGet.PortKeys">
            <summary>
            List of PortKeys that the server should send an update for (in conjuction with <see cref="F:Yodiwo.API.Plegma.ePortStateOperation.SpecificKeys"/>). 
            If set to null or an empty array then the server will send an update for all relevant PortKeys
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortStateGet.#ctor">
            <summary>Port update request constructor</summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortStateGet.#ctor(System.Int32)">
            <summary>
            <summary>Port update request constructor with seq.number</summary>
            </summary>
            <param name="seqNo">sequence number of this message</param>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortState">
            <summary>
            internal state of a referenced Port
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortState.PortKey">
            <summary>
            <see cref="F:Yodiwo.API.Plegma.PortState.PortKey"/> of the <see cref="T:Yodiwo.API.Plegma.Port"/> this message refers to (either generating the event, or receiving the event)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortState.State">
            <summary>
            Contents of port in string form. See <see cref="F:Yodiwo.API.Plegma.Port.State"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortState.RevNum">
            <summary>
            Revision number of this update; matches the Port State's internal sequence numbering. See <see cref="F:Yodiwo.API.Plegma.Port.State"/>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortState.IsDeployed">
            <summary>
            Specifies whether this port is connected in currently deployed graphs
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortState.#ctor">
            <summary>
            parameterless constructor for Port States
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortState.#ctor(System.String,System.String,System.UInt32,System.Boolean)">
            <summary>
            constructor of PortEvent classes
            </summary>
            <param name="pkey">PortKey of Port this event refers to</param>
            <param name="state">State of Port (i.e. contents of message, <see cref="F:Yodiwo.API.Plegma.Port.State"/></param>
            <param name="revNum">Revision number of this event</param>
            <param name="isDeployed">Specifies whether this Port is currently active</param>
        </member>
        <member name="T:Yodiwo.API.Plegma.PortStateSet">
            <summary>
            Active Port Keys Msg
            Informs Node of all currently active Ports (i.e. Ports that are connected and active in currently deployed graphs). 
            Should be used to 1. supress events from inactive ports, allowing more efficient use of medium, 2. sync Port states with the server
            <para>Direction: Cloud -> Node</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortStateSet.Operation">
            <summary>Type of operation responding to</summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PortStateSet.PortStates">
            <summary>
            Array of requested Port states.
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.PortStateSet.#ctor">
            <summary>Port update message constructor</summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ActivePortKeysMsg">
            <summary>
            Active Port Keys Msg
            Informs Node of all currently active Ports (i.e. Ports that are connected and active in currently deployed graphs). 
            Should be used by Nodes to supress events from inactive ports, allowing more efficient use of medium
            <para>Direction: Cloud -> Node</para>
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.ActivePortKeysMsg.ActivePortKeys">
            <summary>
            Array of portkeys of currently active Ports
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ActivePortKeysMsg.#ctor">
            <summary>
            parameterless constructor of Active PortKeys message
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.ActivePortKeysMsg.#ctor(System.Int32)">
            <summary>
            constructor of Active PortKeys message with sequence numbers
            </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.LocallyDeployedGraphsMsg">
            <summary>
            Inform server for local deployed graphs (to sync up on connect)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.LocallyDeployedGraphsMsg.DeployedGraphKeys">
            <summary> DeployedGraphKeys </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.GraphDeploymentReq">
            <summary>
            Node Graph Deploy/Undeploy Request (respond with <see cref="T:Yodiwo.API.Plegma.GenericRsp"/>)
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GraphDeploymentReq.GraphKey">
            <summary> GraphKey </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GraphDeploymentReq.IsDeployed">
            <summary> IsDeployed </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.GraphDeploymentReq.GraphDescriptor">
            <summary> GraphDescriptor </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.FcmConnectionMsg">
            <summary>
            GCM connection message
            send by a GCM client to indicate that it can be reached over GCM
            This is also used by the server to create the NodeKey - (GCM) Registration Id association, and authenticate Registration Ids
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.FcmConnectionMsg.NodeKey">
            <summary> NodeKey </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.FcmConnectionMsg.RegistrationId">
            <summary> Registration Id issued by the GCM connection server </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.FcmDisconnectionMsg">
            <summary>
            GCM connection message
            send by a GCM client to indicate that it can no longer be reached over GCM
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.FcmDisconnectionMsg.RegistrationId">
            <summary> Registration Id issued by the GCM connection server </summary>
        </member>
        <member name="T:Yodiwo.API.Plegma.ThingTypeLibrary">
            <summary>
            
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PlegmaAPI.ApiMessages">
            <summary>
            List of all possible API messages that are exchanged between Nodes and the Yodiwo Cloud Service
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PlegmaAPI.ApiMsgNames">
            <summary>
            Dictionary that maps API classes to names. These names are the ones used for REST routes, MQTT topics, or RabbitMQ queue names
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PlegmaAPI.ApiMsgRetained">
            <summary>
            Dictionary that maps API classes to retain values. 
            If true, then messages should be retained (either for protocols that support this natively or if implemented as extra)
            If false, the broker is instructed to not retain the message
            If an API msg is not found on this dictionary, the caller should assume "false"
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.PlegmaAPI.ApiMsgNamesToTypes">
            <summary>
            Dictionary that maps API names to classes. These names are the ones used for REST routes, MQTT topics, or RabbitMQ queue names
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodePairing.NodePairingConstants.ApiMsgNames">
            <summary>
            Dictionary that maps API classes to names. These names are the ones used for REST routes, MQTT topics, or RabbitMQ queue names
            </summary>
        </member>
        <member name="F:Yodiwo.API.Plegma.NodePairing.NodePairingConstants.ApiMsgNamesToTypes">
            <summary>
            Dictionary that maps API namses to classes. These names are the ones used for REST routes, MQTT topics, or RabbitMQ queue names
            </summary>
        </member>
        <member name="M:Yodiwo.API.Plegma.Validators.ValidateKey(System.String)">
            <summary> Validates key format type ( alphanumeric+dashes ) </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioFlow">
            <summary>
            type of audio actions that each audio source can handle
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioFlow.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioFlow.Start">
            <summary>AudioSource should start streaming</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioFlow.Stop">
            <summary>AudioSource should stop streaming</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioIn">
            <summary>
            type of audiosources
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioIn.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioIn.Node">
            <summary>Node, the audio source is coming from a local device i.e. microphone</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioIn.Mp3Url">
            <summary>Mp3Url, the audio source is coming from a publicly accessible mp3 url</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerAction">
             <summary>
            AudioServerAction: specifies the operations that a YAudioServer should perform
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerAction.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerAction.GetMP3Feed">
            <summary>GetMP3Feed, get a MP3 Audio Feed</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerAction.GetAudioPipe">
            <summary>GetAudioPipe, get an Audio Pipe</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerAction.ReleaseAudioFeed">
            <summary>Release Feed, release a binded Audio Feed</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioMediaDescriptor">
            <summary>
            Basic Output Type of AudioSources
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioMediaDescriptor.Uri">
            <summary>Uri is configured from the Nodekey and the name of the AudioSource </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioMediaDescriptor.AudioDevice">
            <summary>AudioDevice specify the type of the AudioSource </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioMediaDescriptor.Action">
            <summary>Action specify the action that the AudioSource should perform </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.Audio">
             <summary>
            Audio: Static class of the Audio Api Messages, that are used towards audio streaming
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.Audio.ApiGroupName">
            <summary>ApiGroupName: specify the name of the Audio Api protocol</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.Audio.ApiMessages">
            <summary>ApiMessages: specify the types of the Audio Messages</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioDataReq">
            <summary>
            AudioDataReq: used to request from a YAudioClient to start/stop send its audio data to the YAudioServer
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioDataReq.Aflow">
            <summary>specifies if the Yaudioclient should start/stop streaming </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioDataResp">
            <summary>
            AudioDataResp: used as response from a YAudioClient to the YaudioServer
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioDataResp.Status">
            <summary>Status specify the status code of the audio streaming action</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioDataResp.Audiotoken">
            <summary>Audiotoken specify the unique identifier that a YAudioClient has used so as to connect to the YAudioServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioAuthenticationRequest">
             <summary>
            AudioAuthenticationRequest: used as request from the YAudioServer for the negotiation with a YAudioClient
             </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioAuthenticationResponse">
             <summary>
            AudioAuthenticationResponse: used as response from the YAudioClient so as to authenticate itself to the YAudioServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioAuthenticationResponse.Audiotoken">
            <summary>Audiotoken specify the unique identifier that a YAudioClient has used so as to connect to the YAudioServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioData">
             <summary>
            AudioData: used for streaming the audio data
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioData.LinearBytes">
            <summary>LinearBytes include the audio data</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerFeedRequest">
             <summary>
            AudioServerFeedRequest: used for sending requests to the AudioManager
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedRequest.Action">
            <summary>Action: specify the action that the audiomanager should handle</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedRequest.Identification">
            <summary>Identification: specify the unique identifier of an audio feed </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedRequest.PreferredAudioToken">
            <summary>PreferredAudioToken: specify an audiotoken, that the audio feed will use as unique identifier </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerFeedResponse">
             <summary>
            AudioServerFeedResponse: used for sending Audio Feed Responses from the AudioManager
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedResponse.ServerIp">
            <summary>ServerIp: specify the IP address of the YAudioServer that a YAudioClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedResponse.Port">
            <summary>Port: specify the Port of the YAudioServer that a YAudioClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedResponse.AudioToken">
            <summary>AudioToken: Specify the unique identifier that a YAudioClient has to use in the negotiation phase so as to conenct to the YAudioServer</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedResponse.Status">
            <summary>Status: Specify the status code of the requested action</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerFeedResponse.Mp3Stream">
            <summary>MP3Steam: Specify the MP3 uri, that the MP3 audio stream is public accesible</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerConnectRequest">
             <summary>
            AudioServerConnectRequest: used for sending requests to a Yodiwo Node, which supports audio streaming, so as to connect to the Audio Server
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerConnectRequest.ServerIp">
            <summary>ServerIp: specify the IP address of the YAudioServer that a YAudioClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerConnectRequest.Port">
            <summary>Port: specify the Port of the YAudioServer that a YAudioClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerConnectRequest.AudioToken">
            <summary>AudioToken: Specify the unique identifier that a YAudioClient has to use in the negotiation phase so as to conenct to the YAudioServer</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerConnectRequest.AudioDevDesc">
            <summary>AudioDevDesc: Specify a string descriptor of the Audio Device</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerConnectResponse">
             <summary>
            AudioServerConnectResponse: used for sending connect responses from a Yodiwo Node, which supports audio streaming, to the YAudioServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerConnectResponse.Status">
            <summary>Status: Specify the status code, when setting up the YAudioSource</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerDisconnectRequest">
             <summary>
            AudioServerDisconnectRequest: used for sending disconnect requests to a Yodiwo Node, which supports audio streaming, so as to disconnect from the Audio Server
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerDisconnectRequest.AudioToken">
            <summary>AudioToken: Specify the unique identifier that a YAudioClient has to use in the negotiation phase so as to conenct to the YAudioServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.AudioServerDisconnectResponse">
             <summary>
            AudioServerDisconnectResponse: used for sending disconnect responses from a Yodiwo Node, which supports audio streaming, to the YAudioServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.AudioServerDisconnectResponse.Status">
            <summary>Status: Specify the status code, when tearing down the YAudioSource</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoFlow">
            <summary>
            type of video actions that each video source can handle
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoFlow.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoFlow.Start">
            <summary>VideoSource should start streaming</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoFlow.Stop">
            <summary>VideoSource should stop streaming</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoIn">
            <summary>
            type of videosources
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoIn.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoIn.Node">
            <summary>Node, the video source is coming from a local device i.e. webcam, ipcamera,screensharing</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoIn.WebUrl">
            <summary>WebUrl, the video source is coming from a public accessible video url</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoIn.Sip">
            <summary>Sip, the video source is coming from an incoming sip video call</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerAction">
             <summary>
            VideoServerAction: specifies the operations that a YVideoServer should perform
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerAction.None">
            <summary>None, should not be used!</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerAction.GetVideoFeed">
            <summary>GetVideoFeed, get a Video Feed</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerAction.ReleaseVideoFeed">
            <summary>ReleaseVideoFeed, release a binded Video Feed</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoDescriptor">
            <summary>
            VideoDescriptor: specify an http(s) or rtsp url where a video stream is accessible
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoDescriptor.HttpUrl">
            <summary>Http(s) Url </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoDescriptor.RtspUrl">
            <summary>Rtsp Url </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoMediaDescriptor">
            <summary>
            Basic Output Type of VideoSources
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.Uri">
            <summary>Uri, is configured from the Nodekey and the name of the VideoSource </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.Uname">
            <summary>Uname, specifies the Username of the IPCamera </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.Pwd">
            <summary>Pwd, specifies the pwd of the IPCamera </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.Protocol">
            <summary>Pwd, specifies the protocol of the IPCamera </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.VideoDevice">
            <summary>VideoDevice specify the type of the VideoSource </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoMediaDescriptor.Action">
            <summary>Action specify the action that the VideoSource should perform </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.Video">
             <summary>
            Video: Static class of the Video Api Messages, that are used towards video streaming
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.Video.ApiGroupName">
            <summary>ApiGroupName: specify the name of the Video Api protocol</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.Video.ApiMessages">
            <summary>ApiMessages: specify the types of the Video Messages</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoDataReq">
            <summary>
            VideoDataReq: used to request from a YVideoClient to start/stop send its video data to the YVideoServer
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoDataReq.Vflow">
            <summary>specifies if the YVideoClient should start/stop streaming </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoDataResp">
            <summary>
            VideoDataResp: used as response from the YVideoClient to the YVideoServer
            </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoDataResp.Status">
            <summary>Status specify the status code of the video streaming action</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoDataResp.VideoToken">
            <summary>Videotoken specify the unique identifier that a YVideoClient has used so as to connect to the YVideooServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoAuthenticationRequest">
             <summary>
            VideoAuthenticationRequest: used as request from the YVideoServer for the negotiation with a YVideoClient
             </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoAuthenticationResponse">
             <summary>
            VideoAuthenticationResponse: used as response from the YVideoClient so as to authenticate itself to the YVideoServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoAuthenticationResponse.VideoToken">
            <summary>Videotoken specify the unique identifier that a YVideoClient has used so as to connect to the YVideoServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoData">
             <summary>
            VideoData: used for streaming the video data
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoData.LinearBytes">
            <summary>LinearBytes include the video data</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerFeedRequest">
             <summary>
            VideoServerFeedRequest: used for sending requests to the VideoManager
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedRequest.Action">
            <summary>Action: specify the action that the videomanager should handle</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedRequest.Identification">
            <summary>Identification: specify the unique identifier of a video feed </summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerFeedResponse">
             <summary>
            VideoServerFeedResponse: used for sending Video Feed Responses from the VideoManager
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedResponse.ServerIP">
            <summary>ServerIp: specify the IP address of the YVideoServer that a YVideoClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedResponse.Port">
            <summary>Port: specify the Port of the YVideoServer that a YVideoClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedResponse.VideoToken">
            <summary>VideoToken: specify the unique identifier that a YVideoClient has to use in the negotiation phase so as to conenct to the YVideoServer</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedResponse.Status">
            <summary>Status: specify the status code of the requested action</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerFeedResponse.MjpegStream">
            <summary>MjpegStream: specify the Mjpeg uri, that the MJPEG video stream is public accesible</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerConnectRequest">
             <summary>
            VideoServerConnectRequest: used for sending requests to a Yodiwo Node, which supports video streaming, so as to connect to the Video Server
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.ServerIP">
            <summary>ServerIp: specify the IP address of the YVideoServer that a YVideoClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.Port">
            <summary>Port: specify the Port of the YVideoServer that a YVideoClient has to connect with</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.VideoToken">
            <summary>VideoToken: specify the unique identifier that a YVideoClient has to use in the negotiation phase so as to conenct to the YVideoServer</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.VideoDevUrl">
            <summary>VideoDevUrl: specify a string descriptor of the Video Device</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.VideoDevUname">
            <summary>VideoDevUname: specify the username so as to access the Video Device</summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectRequest.VideoDevPwd">
            <summary>VideoDevPwd: specify the password so as to access the Video Device</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerConnectResponse">
             <summary>
            VideoServerConnectResponse: used for sending connect responses from a Yodiwo Node, which supports video streaming, to the YVideoServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerConnectResponse.Status">
            <summary>Status: Specify the status code, when setting up the YVideoSource</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerDisconnectRequest">
             <summary>
            VideoServerDisconnectRequest: used for sending disconnect requests to a Yodiwo Node, which supports video streaming, so as to disconnect from the Video Server
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerDisconnectRequest.VideoToken">
            <summary>VideoToken: Specify the unique identifier that a YVideoClient has to use in the negotiation phase so as to conenct to the YVideoServer</summary>
        </member>
        <member name="T:Yodiwo.API.MediaStreaming.VideoServerDisconnectResponse">
             <summary>
            VideoServerDisconnectResponse: used for sending disconnect responses from a Yodiwo Node, which supports video streaming, to the YVideoServer
             </summary>
        </member>
        <member name="F:Yodiwo.API.MediaStreaming.VideoServerDisconnectResponse.Status">
            <summary>Status: Specify the status code, when tearing down the YVideoSource</summary>
        </member>
    </members>
</doc>
